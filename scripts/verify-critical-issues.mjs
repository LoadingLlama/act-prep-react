import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.REACT_APP_SUPABASE_URL,
  process.env.REACT_APP_SUPABASE_ANON_KEY
);

async function verifyCriticalIssues() {
  console.log('========================================');
  console.log('VERIFYING CRITICAL ISSUES IN SUPABASE');
  console.log('========================================\n');

  // Issue 1: Verify algebra-skills is missing core concepts
  console.log('üîç ISSUE 1: Verifying algebra-skills lesson...\n');

  const { data: algebraSkills } = await supabase
    .from('lessons')
    .select('*')
    .eq('lesson_key', 'algebra-skills')
    .single();

  if (algebraSkills) {
    console.log('‚úì Lesson found in Supabase');
    console.log(`Title: ${algebraSkills.title}`);
    console.log(`Length: ${algebraSkills.content.length} chars\n`);

    const content = algebraSkills.content.toLowerCase();

    console.log('Checking for core concepts:');
    console.log(`  ‚Ä¢ "distribute": ${content.includes('distribute') ? '‚úì FOUND' : '‚úó MISSING'}`);
    console.log(`  ‚Ä¢ "distributive": ${content.includes('distributive') ? '‚úì FOUND' : '‚úó MISSING'}`);
    console.log(`  ‚Ä¢ "combine like terms": ${content.includes('combine like terms') || content.includes('combining like terms') ? '‚úì FOUND' : '‚úó MISSING'}`);
    console.log(`  ‚Ä¢ "like terms": ${content.includes('like terms') ? '‚úì FOUND' : '‚úó MISSING'}`);
    console.log(`  ‚Ä¢ "factor": ${content.includes('factor') ? '‚úì FOUND' : '‚úó MISSING'}`);
    console.log(`  ‚Ä¢ "expand": ${content.includes('expand') ? '‚úì FOUND' : '‚úó MISSING'}`);
    console.log(`  ‚Ä¢ "foil": ${content.includes('foil') ? '‚úì FOUND' : '‚úó MISSING'}`);

    console.log('\nüìù First 500 characters of content:');
    console.log(algebraSkills.content.substring(0, 500) + '...\n');
  } else {
    console.log('‚úó Lesson NOT FOUND in database\n');
  }

  console.log('========================================\n');

  // Issue 2: Verify circles-ellipses is missing formulas
  console.log('üîç ISSUE 2: Verifying circles-ellipses lesson...\n');

  const { data: circles } = await supabase
    .from('lessons')
    .select('*')
    .eq('lesson_key', 'circles-ellipses')
    .single();

  if (circles) {
    console.log('‚úì Lesson found in Supabase');
    console.log(`Title: ${circles.title}`);
    console.log(`Length: ${circles.content.length} chars\n`);

    const content = circles.content.toLowerCase();

    console.log('Checking for circle formulas:');
    console.log(`  ‚Ä¢ "area": ${content.includes('area') ? '‚úì FOUND' : '‚úó MISSING'}`);
    console.log(`  ‚Ä¢ "circumference": ${content.includes('circumference') ? '‚úì FOUND' : '‚úó MISSING'}`);
    console.log(`  ‚Ä¢ "œÄr¬≤" or "pi*r^2": ${content.includes('œÄr¬≤') || content.includes('pi*r^2') || content.includes('œÄr2') || content.includes('area of a circle') ? '‚úì FOUND' : '‚úó MISSING'}`);
    console.log(`  ‚Ä¢ "2œÄr" or "2*pi*r": ${content.includes('2œÄr') || content.includes('2*pi*r') || content.includes('2œÄr') ? '‚úì FOUND' : '‚úó MISSING'}`);
    console.log(`  ‚Ä¢ "diameter": ${content.includes('diameter') ? '‚úì FOUND' : '‚úó MISSING'}`);

    console.log('\nüìù Full content:');
    console.log(circles.content);
    console.log('\n');
  } else {
    console.log('‚úó Lesson NOT FOUND in database\n');
  }

  console.log('========================================\n');

  // Issue 3: Verify geometry-angles has broken image references
  console.log('üîç ISSUE 3: Verifying geometry-angles for broken images...\n');

  const { data: geoAngles } = await supabase
    .from('lessons')
    .select('*')
    .eq('lesson_key', 'geometry-angles')
    .single();

  if (geoAngles) {
    console.log('‚úì Lesson found in Supabase');
    console.log(`Title: ${geoAngles.title}`);
    console.log(`Length: ${geoAngles.content.length} chars\n`);

    const content = geoAngles.content;

    console.log('Checking for image/diagram references:');
    console.log(`  ‚Ä¢ "diagram": ${content.toLowerCase().includes('diagram') ? '‚úì FOUND' : '‚úó NOT FOUND'}`);
    console.log(`  ‚Ä¢ "figure": ${content.toLowerCase().includes('figure') ? '‚úì FOUND' : '‚úó NOT FOUND'}`);
    console.log(`  ‚Ä¢ "graph": ${content.toLowerCase().includes('graph') ? '‚úì FOUND' : '‚úó NOT FOUND'}`);
    console.log(`  ‚Ä¢ "<img": ${content.includes('<img') ? '‚úì HAS IMAGE TAG' : '‚úó NO IMAGE TAG'}`);

    // Find the exact quotes with diagram references
    const lines = content.split('\n');
    const diagramLines = lines.filter(line =>
      line.toLowerCase().includes('diagram') ||
      line.toLowerCase().includes('figure') ||
      line.toLowerCase().includes('graph')
    );

    if (diagramLines.length > 0) {
      console.log('\nüìù Lines mentioning diagrams/figures/graphs:');
      diagramLines.forEach(line => console.log(`  "${line.trim()}"`));
    }

    console.log('\n');
  } else {
    console.log('‚úó Lesson NOT FOUND in database\n');
  }

  console.log('========================================\n');

  // Issue 4: Count total lessons to verify database connectivity
  console.log('üîç VERIFICATION: Checking database connection...\n');

  const { data: allLessons, error } = await supabase
    .from('lessons')
    .select('id, title, lesson_key, subject')
    .eq('subject', 'math');

  if (error) {
    console.log('‚úó DATABASE ERROR:', error.message);
  } else {
    console.log(`‚úì Successfully connected to Supabase`);
    console.log(`‚úì Found ${allLessons.length} math lessons in database`);
    console.log(`‚úì All data is stored and accessible\n`);
  }

  console.log('========================================');
  console.log('VERIFICATION COMPLETE');
  console.log('========================================\n');
}

verifyCriticalIssues();
